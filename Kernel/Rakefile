require_relative '../BuildSupport/Common'
require 'rake/clean'
require 'rake/loaders/makefile'
require 'json'

SRC=FileList[]

SRC.include([
  "Boot/KernelInitialize.c",
  "Boot/startup.nasm",
  
  # Multiboot
  "Multiboot/Multiboot.c",
  
  #Logging
  "Logging/Logging.c",
  "Logging/LoggingDriverSerial.c",
  
  # PhyMem
  "Memory/PhyMem.c",
  
  "Utils/Object.h",
  
  # Kernel Info
  "KernelInfo.c"
])

CFLAGS << '-I.' \
       << '-ffreestanding' << '-mno-sse' << '-mno-red-zone' \
       << '-mno-mmx' << '-mno-sse' << '-mno-sse2' \
       << '-mno-sse3' << '-mno-3dnow'

# Relax some warnings
CFLAGS << '-Wno-missing-prototypes' << '-Wno-packed' << "-Wno-gnu" << "-Wno-variadic-macros" << '-Wno-missing-variable-declarations' << '-Wno-unused-variable' << '-Wno-pedantic'

DEFINES << '-D__KERNEL__'
DEFINES << '-DKERNEL_LOAD_ADDRESS=0xC0000000'
LDFLAGS << '../CoreSystem/libCoreSystem-kernel.a'

OBJ = SRC.ext('o').pathmap("#{OBJ_DIR}/%p")
DEPS = OBJ.ext('depend')

LINKER_SCRIPT = 'kernel.ld'

CLEAN.include(OBJ_DIR)
CLEAN.include('kernel')
CLEAN.include('kernel.sym')

task :default => [ 'kernel' ]

file 'kernel' => [ *OBJ, LINKER_SCRIPT ]  do |t|
	puts " [LD] #{t.name}"
	sh "#{LD} -T#{LINKER_SCRIPT} -o #{t.name} #{OBJ.join(' ')} #{LDFLAGS.join(' ')}"
	puts " [SYM] #{t.name}.sym"
	sh "#{OBJCOPY} --only-keep-debug #{t.name} #{t.name}.sym"
	puts " [STRIP] #{t.name}"
	sh "#{STRIP} #{t.name}"
end

task 'install' => ['kernel'] do
  puts " [INSTALL] kernel"
  cp 'kernel', "#{ROOT}/kernel"
end

task 'run' => ['install'] do
    sh "qemu-system-#{PLATFORM} -d int,pcall -no-reboot -serial stdio -kernel kernel"
end

task 'debug' => ['kernel'] do
    puts "Connect with gdb on tcp::1234. Execution is halted."
    sh "qemu-system-#{PLATFORM} -S -gdb tcp::1234 -no-reboot -serial stdio -kernel kernel"
end

task 'attach' => ['kernel.sym'] do
    sh "#{GDB} kernel.sym --eval-command=\"target remote tcp::1234\""
end

file 'KernelInfo.c' => [ 'KernelInfo.c.rake-defs' ] do |t|
  defs = {}
  open('KernelInfo.c.rake-defs') do |f|
    defs = JSON.load(f)
  end
  
  content = <<-eos

char* KernelVersion = "#{defs['version']}";
char* KernelGitVersion = "#{defs['gitVersion']}";

  eos
  
  open(t.name, "w") do |f|
    f.write(content)
  end
end

# A KernelInfo Task
class KernelInfoDefTask < Rake::FileTask
  @_currentDefs
  
  def initialize(task_name, app)
    super(task_name, app)
    @actions << Proc.new do |t|
      
      open(name, "w") do |f|
        JSON.dump(currentDefs(), f)
      end
    end
  end
  
  def out_of_date?(stmp)
    defs = {}
    begin
      open(name) do |f|
        defs = JSON.load(f)
      end if File.file?(name)
    rescue
      defs = {}
    end
    
    defs != currentDefs()
  end
  
  def currentDefs
    @_currentDefs ||= {
      'gitVersion' => `git rev-parse --short HEAD`.strip,
      'version' => `git describe --match 'version/*' --always --dirty`.strip().sub('version/', '')
    } 
    @_currentDefs
  end
end

KernelInfoDefTask.define_task 'KernelInfo.c.rake-defs' => []

DEPS.each{|file| Rake::MakefileLoader.new.load(file) if File.file?(file)}
